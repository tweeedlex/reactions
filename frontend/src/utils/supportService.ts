import supabase from './supabase';
import type { SupportTicket } from '@/types';
import { saveTicketStatus, getTicketStatus } from './localStorage';

export class SupportService {
  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ support tickets –¥–ª—è –∫–æ–º–ø–∞–Ω—ñ—ó
   */
  static async getCompanySupportTickets(companyId: number): Promise<SupportTicket[]> {
    const { data, error } = await supabase
      .from('v_company_support_tickets')
      .select('*')
      .eq('company_id', companyId)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Error fetching support tickets:', error);
      throw error;
    }

    return data || [];
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ support ticket –∑–∞ ID
   */
  static async getSupportTicket(ticketId: number): Promise<SupportTicket | null> {
    const { data, error } = await supabase
      .from('v_company_support_tickets')
      .select('*')
      .eq('id', ticketId)
      .single();

    if (error) {
      console.error('Error fetching support ticket:', error);
      throw error;
    }

    return data;
  }

  /**
   * –û–Ω–æ–≤–∏—Ç–∏ support ticket
   */
  static async updateSupportTicket(
    ticketId: number, 
    updates: Partial<Pick<SupportTicket, 'status_title' | 'ai_ton_of_voice_value' | 'ai_suggested_answer_text'>>
  ): Promise<SupportTicket> {
    const { data, error } = await supabase
      .from('v_company_support_tickets') // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —Ç–∞–±–ª–∏—Ü—é –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
      .update(updates)
      .eq('id', ticketId)
      .select()
      .single();

    if (error) {
      console.error('Error updating support ticket:', error);
      throw error;
    }

    return data;
  }

  /**
   * –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —Ç—ñ–∫–µ—Ç–∞ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É —Ç–∞–±–ª–∏—Ü—é
   */
  static async updateTicketStatus(
    ticketId: number, 
    statusTitle: string
  ): Promise<void> {
    const { error } = await supabase
      .from('v_company_support_tickets')
      .update({ status_title: statusTitle })
      .eq('id', ticketId);

    if (error) {
      console.error('Error updating ticket status:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–∫—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç (–ª–æ–∫–∞–ª—å–Ω–æ)
   */
  static async closeTicket(ticketId: number): Promise<void> {
    saveTicketStatus(ticketId, 'closed');
  }

  /**
   * –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç (–ª–æ–∫–∞–ª—å–Ω–æ)
   */
  static async reopenTicket(ticketId: number): Promise<void> {
    saveTicketStatus(ticketId, 'open');
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Ç—ñ–∫–µ—Ç–∞
   */
  static getLocalTicketStatus(ticketId: number): 'open' | 'closed' | null {
    return getTicketStatus(ticketId);
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ SupportTicket –≤ Comment –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ—Å–Ω—É—é—á–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
   */
  static convertTicketToComment(ticket: SupportTicket): import('@/types').Comment {
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∂–µ—Ä–µ–ª–∞ –¥–∞–Ω–∏—Ö –∞–±–æ —Ç–∏–ø—É —Ç—ñ–∫–µ—Ç–∞
    const platform = this.getPlatformFromTicketType(ticket.ticket_type_title, ticket.ai_company_answer_data_source_title);
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ sentiment –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
    const sentiment = this.getSentimentFromTone(ticket.ai_ton_of_voice_value);
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞—Ç—É—Å—É
    const priority = this.getPriorityFromStatus(ticket.status_title);
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ username –Ω–∞ –æ—Å–Ω–æ–≤—ñ ID
    const username = `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á #${ticket.id}`;
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ avatar –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–∏–ø—É
    const avatar = this.getAvatarFromTicketType(ticket.ticket_type_title);

    return {
      id: ticket.id,
      platform,
      username,
      avatar,
      text: ticket.user_message,
      timestamp: this.formatTimestamp(ticket.created_at),
      sentiment,
      priority,
      likes: 0, // –ù–µ –º–∞—î–º–æ –¥–∞–Ω–∏—Ö –ø—Ä–æ –ª–∞–π–∫–∏
      replies: 0, // –ù–µ –º–∞—î–º–æ –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
      url: ticket.ai_company_answer_data_source_url || '#',
      highlightedKeywords: ticket.tags_array || [],
      localStatus: this.getLocalTicketStatus(ticket.id) || 'open' // –î–æ–¥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
    };
  }

  /**
   * –í–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–∏–ø—É —Ç—ñ–∫–µ—Ç–∞ –∞–±–æ –¥–∂–µ—Ä–µ–ª–∞ –¥–∞–Ω–∏—Ö
   */
  private static getPlatformFromTicketType(ticketType: string, dataSourceTitle?: string): string {
    // –Ø–∫—â–æ —î –Ω–∞–∑–≤–∞ –¥–∂–µ—Ä–µ–ª–∞ –¥–∞–Ω–∏—Ö, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—ó
    if (dataSourceTitle && dataSourceTitle.trim()) {
      return dataSourceTitle.trim();
    }

    // –Ü–Ω–∞–∫—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–∞–ø—ñ–Ω–≥ —Ç–∏–ø—ñ–≤
    const platformMap: Record<string, string> = {
      'Facebook': 'Facebook',
      'Instagram': 'Instagram',
      'Twitter': 'Twitter',
      'Reddit': 'Reddit',
      'TrustPilot': 'TrustPilot',
      'App Store': 'App Store',
      'Google Play': 'Google Play',
      'YouTube': 'YouTube',
      'TikTok': 'TikTok',
      'LinkedIn': 'LinkedIn'
    };

    return platformMap[ticketType] || '–°–æ—Ü—ñ–∞–ª—å–Ω–∞ –º–µ—Ä–µ–∂–∞';
  }

  /**
   * –í–∏–∑–Ω–∞—á–∏—Ç–∏ sentiment –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
   */
  private static getSentimentFromTone(toneValue: number): 'positive' | 'negative' | 'neutral' {
    if (toneValue >= 0.6) return 'positive';
    if (toneValue <= 0.4) return 'negative';
    return 'neutral';
  }

  /**
   * –í–∏–∑–Ω–∞—á–∏—Ç–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞—Ç—É—Å—É
   */
  private static getPriorityFromStatus(status: string): 'high' | 'medium' | 'low' {
    const highPriorityStatuses = ['–ö—Ä–∏—Ç–∏—á–Ω–∏–π', '–í–∏—Å–æ–∫–∏–π', '–¢–µ—Ä–º—ñ–Ω–æ–≤–æ'];
    const mediumPriorityStatuses = ['–°–µ—Ä–µ–¥–Ω—ñ–π', '–í –æ–±—Ä–æ–±—Ü—ñ', '–ù–æ–≤–∏–π'];
    
    if (highPriorityStatuses.some(s => status.includes(s))) return 'high';
    if (mediumPriorityStatuses.some(s => status.includes(s))) return 'medium';
    return 'low';
  }

  /**
   * –í–∏–∑–Ω–∞—á–∏—Ç–∏ avatar –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–∏–ø—É —Ç—ñ–∫–µ—Ç–∞
   */
  private static getAvatarFromTicketType(ticketType: string): string {
    const avatarMap: Record<string, string> = {
      'Facebook': 'üë•',
      'Instagram': 'üì∏',
      'Twitter': 'üê¶',
      'Reddit': 'ü§ñ',
      'TrustPilot': '‚≠ê',
      'App Store': 'üì±',
      'Google Play': 'ü§ñ',
      'YouTube': 'üì∫',
      'TikTok': 'üéµ',
      'LinkedIn': 'üíº'
    };

    return avatarMap[ticketType] || 'üí¨';
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ timestamp
   */
  private static formatTimestamp(timestamp: string): string {
    const date = new Date(timestamp);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffHours / 24);

    if (diffMinutes < 1) {
      return '–©–æ–π–Ω–æ';
    } else if (diffMinutes < 60) {
      return `${diffMinutes} —Ö–≤ —Ç–æ–º—É`;
    } else if (diffHours < 24) {
      return `${diffHours} –≥–æ–¥ —Ç–æ–º—É`;
    } else if (diffDays < 7) {
      return `${diffDays} –¥–Ω —Ç–æ–º—É`;
    } else {
      return date.toLocaleDateString('uk-UA', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    }
  }
}

export const supportService = SupportService;
