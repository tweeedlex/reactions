const { getJson } = require('serpapi');

async function searchMAUPP() {
  try {
    console.log('üîç –ü–æ—à—É–∫ "–§—É—Ç–±–æ–ª—å–Ω–∞ –∞—Ä–µ–Ω–∞ –ú–ê–£–ü" —á–µ—Ä–µ–∑ SerpAPI...');
    
    const searchQueries = [
      '–§—É—Ç–±–æ–ª—å–Ω–∞ –∞—Ä–µ–Ω–∞ –ú–ê–£–ü –ö–∏—ó–≤',
      '–ú–ê–£–ü –ö–∏—ó–≤ —Ñ—É—Ç–±–æ–ª—å–Ω–∞ –∞—Ä–µ–Ω–∞',
      '–ú–ê–£–ü –ö–∏—ó–≤',
      '–ú–ê–£–ü —Ñ—É—Ç–±–æ–ª—å–Ω–∞',
      '–ú–ê–£–ü –ö–∏—ó–≤ —Å–ø–æ—Ä—Ç',
      '–ú–ê–£–ü –ö–∏—ó–≤ —Å—Ç–∞–¥—ñ–æ–Ω',
      '–ú–ê–£–ü –ö–∏—ó–≤ —Ñ—É—Ç–±–æ–ª'
    ];

    for (const query of searchQueries) {
      console.log(`\nüîç –ü–æ—à—É–∫: "${query}"`);
      
      const response = await getJson({
        engine: 'google_maps',
        q: query,
        api_key: 'fda426065a3f31f282eac9271c52fd8eebfe6a5b858b1bc4db2f1bd40112a505',
        hl: 'uk',
        gl: 'ua'
      });

      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: ${response.local_results?.length || 0}`);
      
      if (response.local_results && response.local_results.length > 0) {
        console.log('‚úÖ –ó–Ω–∞–π–¥–µ–Ω—ñ –º—ñ—Å—Ü—è:');
        response.local_results.slice(0, 3).forEach((place, index) => {
          console.log(`${index + 1}. ${place.title}`);
          console.log(`   –ê–¥—Ä–µ—Å–∞: ${place.address || '–ù–µ–º–∞—î'}`);
          console.log(`   Place ID: ${place.place_id || '–ù–µ–º–∞—î'}`);
          console.log(`   –†–µ–π—Ç–∏–Ω–≥: ${place.rating || '–ù–µ–º–∞—î'}`);
          console.log('');
        });
        
        // –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ —â–æ—Å—å —Å—Ö–æ–∂–µ –Ω–∞ –ú–ê–£–ü, –∑—É–ø–∏–Ω—è—î–º–æ—Å—è
        const mauppResult = response.local_results.find(place => 
          place.title.toLowerCase().includes('–º–∞—É–ø') || 
          place.title.toLowerCase().includes('—Ñ—É—Ç–±–æ–ª—å–Ω–∞') ||
          place.title.toLowerCase().includes('–∞—Ä–µ–Ω–∞')
        );
        
        if (mauppResult) {
          console.log('üéØ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–µ –º—ñ—Å—Ü–µ –ú–ê–£–ü!');
          console.log(`–ù–∞–∑–≤–∞: ${mauppResult.title}`);
          console.log(`Place ID: ${mauppResult.place_id}`);
          break;
        }
      } else {
        console.log('‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      }
      
      // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É:', error.message);
  }
}

searchMAUPP();
