const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// –®–ª—è—Ö –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
const dbPath = path.join(__dirname, 'reactions.db');

console.log('üóëÔ∏è –û—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...\n');

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î:', err.message);
    return;
  }
  console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');
});

// –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å
const clearDatabase = () => {
  return new Promise((resolve, reject) => {
    // –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å
    db.all("SELECT name FROM sqlite_master WHERE type='table'", (err, tables) => {
      if (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç–∞–±–ª–∏—Ü—å:', err.message);
        reject(err);
        return;
      }

      console.log(`üìã –ó–Ω–∞–π–¥–µ–Ω–æ ${tables.length} —Ç–∞–±–ª–∏—Ü—å:`);
      tables.forEach(table => {
        console.log(`  - ${table.name}`);
      });
      console.log('');

      // –û—á–∏—â–∞—î–º–æ –∫–æ–∂–Ω—É —Ç–∞–±–ª–∏—Ü—é
      let completed = 0;
      const total = tables.length;

      if (total === 0) {
        console.log('‚ÑπÔ∏è –ù–µ–º–∞—î —Ç–∞–±–ª–∏—Ü—å –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è');
        resolve();
        return;
      }

      tables.forEach(table => {
        db.run(`DELETE FROM ${table.name}`, (err) => {
          if (err) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ ${table.name}:`, err.message);
          } else {
            console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—é: ${table.name}`);
          }

          completed++;
          if (completed === total) {
            console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!');
            resolve();
          }
        });
      });
    });
  });
};

// –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ –æ—á–∏—â–µ–Ω–Ω—è–º
const getStats = () => {
  return new Promise((resolve, reject) => {
    db.all("SELECT name FROM sqlite_master WHERE type='table'", (err, tables) => {
      if (err) {
        reject(err);
        return;
      }

      let completed = 0;
      const stats = {};

      if (tables.length === 0) {
        resolve(stats);
        return;
      }

      tables.forEach(table => {
        db.get(`SELECT COUNT(*) as count FROM ${table.name}`, (err, row) => {
          if (err) {
            console.warn(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è ${table.name}:`, err.message);
            stats[table.name] = 0;
          } else {
            stats[table.name] = row.count;
          }

          completed++;
          if (completed === tables.length) {
            resolve(stats);
          }
        });
      });
    });
  });
};

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
  try {
    // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ—á–∏—â–µ–Ω–Ω—è
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ –æ—á–∏—â–µ–Ω–Ω—è:');
    const statsBefore = await getStats();
    Object.entries(statsBefore).forEach(([table, count]) => {
      console.log(`  - ${table}: ${count} –∑–∞–ø–∏—Å—ñ–≤`);
    });
    console.log('');

    // –û—á–∏—â–∞—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    await clearDatabase();

    // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è:');
    const statsAfter = await getStats();
    Object.entries(statsAfter).forEach(([table, count]) => {
      console.log(`  - ${table}: ${count} –∑–∞–ø–∏—Å—ñ–≤`);
    });

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
  } finally {
    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
    db.close((err) => {
      if (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ë–î:', err.message);
      } else {
        console.log('\n‚úÖ –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î –∑–∞–∫—Ä–∏—Ç–æ');
      }
    });
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—á–∏—â–µ–Ω–Ω—è
main();
