// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏—Ç—è–≥–Ω–µ–Ω–Ω—è Place ID –∑ Google Maps URL
function extractPlaceIdFromUrl(url) {
  console.log('üîç –ê–Ω–∞–ª—ñ–∑ URL:', url);
  
  // –†—ñ–∑–Ω—ñ –ø–∞—Ç–µ—Ä–Ω–∏ –¥–ª—è –≤–∏—Ç—è–≥–Ω–µ–Ω–Ω—è Place ID
  const patterns = [
    // –ü–∞—Ç–µ—Ä–Ω 1: !1sPLACE_ID:PLACE_ID
    /!1s([^:!]+):([^!]+)/,
    // –ü–∞—Ç–µ—Ä–Ω 2: /place/PLACE_ID/
    /\/place\/([^\/\?]+)/,
    // –ü–∞—Ç–µ—Ä–Ω 3: data=!4m6!3m5!1sPLACE_ID:PLACE_ID
    /!1s([^:!]+):([^!]+)/,
    // –ü–∞—Ç–µ—Ä–Ω 4: ChIJ... (–ø—Ä—è–º–∏–π Place ID)
    /(ChIJ[^\/\?&]+)/
  ];
  
  for (const pattern of patterns) {
    const match = url.match(pattern);
    if (match) {
      // –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ –¥–≤–∞ —á–∞—Å—Ç–∏–Ω–∏ (–æ—Å–Ω–æ–≤–Ω–∏–π —ñ –¥–æ–ø–æ–º—ñ–∂–Ω–∏–π ID)
      if (match[2]) {
        console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ Place ID: ${match[1]}:${match[2]}`);
        return match[1]; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π ID
      } else if (match[1]) {
        console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ Place ID: ${match[1]}`);
        return match[1];
      }
    }
  }
  
  console.log('‚ùå Place ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ URL');
  return null;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ Place ID
async function convertCoordinatesToPlaceId(lat, lng) {
  try {
    console.log(`üîç –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ${lat}, ${lng} –≤ Place ID`);
    
    const response = await fetch(`http://localhost:3000/google-maps/search-coordinates?lat=${lat}&lng=${lng}`);
    const data = await response.json();
    
    if (data.success && data.placeId) {
      console.log(`‚úÖ Place ID: ${data.placeId}`);
      return data.placeId;
    } else {
      console.log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ Place ID –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏');
      return null;
    }
  } catch (error) {
    console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', error.message);
    return null;
  }
}

// –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ –≤–∞—à–∏–º URL
const testUrl = "https://www.google.com/maps/place/%D0%9B%D0%B5%D1%80%D1%83%D0%B0+%D0%9C%D0%B5%D1%80%D0%BB%D0%B5%D0%BD/@50.4000574,30.5350083,16z/data=!4m6!3m5!1s0x40d4cf501efc747b:0xe3dbeeda9478e19d!8m2!3d50.401722!4d30.539767!16s%2Fg%2F1ptvsmft5?entry=ttu&g_ep=EgoyMDI1MTAwMS4wIKXMDSoASAFQAw%3D%3D";

console.log('üöÄ –í–∏—Ç—è–≥–Ω–µ–Ω–Ω—è Place ID –∑ Google Maps URL\n');

// –°–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ Place ID –∑ URL
const placeId = extractPlaceIdFromUrl(testUrl);

if (placeId) {
  console.log(`\nüìç –ó–Ω–∞–π–¥–µ–Ω–∏–π Place ID: ${placeId}`);
  console.log(`üîó URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É: https://maps.google.com/maps/place/${placeId}`);
  console.log(`\nüß™ –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥—É:`);
  console.log(`curl "http://localhost:3000/url-parsing/parse?url=https://maps.google.com/maps/place/${placeId}&language=uk"`);
} else {
  console.log('\nüîÑ –°–ø—Ä–æ–±—É—î–º–æ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ Place ID...');
  
  // –í–∏—Ç—è–≥—É—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑ URL
  const coordMatch = testUrl.match(/@([^,]+),([^,]+)/);
  if (coordMatch) {
    const lat = coordMatch[1];
    const lng = coordMatch[2];
    console.log(`üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: ${lat}, ${lng}`);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ Place ID
    convertCoordinatesToPlaceId(lat, lng);
  } else {
    console.log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑ URL');
  }
}
