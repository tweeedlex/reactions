import { Injectable, Logger } from '@nestjs/common';
import { SerperService, SerperSource } from '../serper/serper.service';
import { CommentsService } from '../comments/comments.service';
import { CreateCommentDto } from '../comments/dto/create-comment.dto';

export enum ParsingType {
  GOOGLE_MAPS = 'google_maps',
  GOOGLE_PLAY = 'google_play',
  APP_STORE = 'app_store',
  GOOGLE_SEARCH = 'google_search'
}

export interface ParsingRequest {
  type: ParsingType;
  identifier: string; // Place ID, App ID, URL, etc.
  language?: string;
  sortBy?: string;
  maxPages?: number;
}

@Injectable()
export class SerperParsingService {
  private readonly logger = new Logger(SerperParsingService.name);

  constructor(
    private readonly serperService: SerperService,
    private readonly commentsService: CommentsService,
  ) {}

  async parseReviews(request: ParsingRequest): Promise<{ comments: CreateCommentDto[]; count: number }> {
    this.logger.log(`üöÄ –ü–∞—Ä—Å–∏–Ω–≥ –≤—ñ–¥–≥—É–∫—ñ–≤ —á–µ—Ä–µ–∑ serper.dev: ${request.type} –¥–ª—è ${request.identifier}`);

    try {
      let comments: CreateCommentDto[] = [];

      switch (request.type) {
        case ParsingType.GOOGLE_MAPS:
          comments = await this.parseGoogleMapsReviews(request);
          break;
        
        case ParsingType.GOOGLE_PLAY:
          comments = await this.parseGooglePlayReviews(request);
          break;
        
        case ParsingType.APP_STORE:
          comments = await this.parseAppStoreReviews(request);
          break;
        
        case ParsingType.GOOGLE_SEARCH:
          comments = await this.parseGoogleSearchReviews(request);
          break;
        
        default:
          throw new Error(`–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø –ø–∞—Ä—Å–∏–Ω–≥—É: ${request.type}`);
      }

      this.logger.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ ${comments.length} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤`);
      return {
        comments,
        count: comments.length
      };

    } catch (error) {
      this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É: ${error.message}`);
      throw error;
    }
  }

  private async parseGoogleMapsReviews(request: ParsingRequest): Promise<CreateCommentDto[]> {
    this.logger.log(`üìç –ü–∞—Ä—Å–∏–Ω–≥ Google Maps –≤—ñ–¥–≥—É–∫—ñ–≤ –¥–ª—è ${request.identifier}`);

    try {
      const comments = await this.serperService.parseGoogleMapsReviews(request.identifier, {
        hl: request.language || 'uk',
        sortBy: request.sortBy as any || 'newest'
      });

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
      if (comments.length > 0) {
        // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–ª—è —Ü—å–æ–≥–æ –º—ñ—Å—Ü—è
        const deletedResult = await this.commentsService.clearByAppId(request.identifier);
        this.logger.log(`–í–∏–¥–∞–ª–µ–Ω–æ ${deletedResult.deletedCount} —Å—Ç–∞—Ä–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è ${request.identifier}`);
        
        // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
        await this.commentsService.bulkCreate(comments);
        this.logger.log(`–ó–±–µ—Ä–µ–∂–µ–Ω–æ ${comments.length} –Ω–æ–≤–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ Google Maps`);
      }

      return comments;

    } catch (error) {
      this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É Google Maps: ${error.message}`);
      throw error;
    }
  }

  private async parseGooglePlayReviews(request: ParsingRequest): Promise<CreateCommentDto[]> {
    this.logger.log(`üì± –ü–∞—Ä—Å–∏–Ω–≥ Google Play Store –≤—ñ–¥–≥—É–∫—ñ–≤ –¥–ª—è ${request.identifier}`);

    try {
      const comments = await this.serperService.parseGooglePlayReviews(request.identifier, {
        language: request.language || 'uk'
      });

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
      if (comments.length > 0) {
        // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–ª—è —Ü—å–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É
        const deletedResult = await this.commentsService.clearByAppId(request.identifier);
        this.logger.log(`–í–∏–¥–∞–ª–µ–Ω–æ ${deletedResult.deletedCount} —Å—Ç–∞—Ä–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è ${request.identifier}`);
        
        // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
        await this.commentsService.bulkCreate(comments);
        this.logger.log(`–ó–±–µ—Ä–µ–∂–µ–Ω–æ ${comments.length} –Ω–æ–≤–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ Google Play Store`);
      }

      return comments;

    } catch (error) {
      this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É Google Play Store: ${error.message}`);
      throw error;
    }
  }

  private async parseAppStoreReviews(request: ParsingRequest): Promise<CreateCommentDto[]> {
    this.logger.log(`üçé –ü–∞—Ä—Å–∏–Ω–≥ App Store –≤—ñ–¥–≥—É–∫—ñ–≤ –¥–ª—è ${request.identifier}`);

    try {
      const comments = await this.serperService.parseAppStoreReviews(request.identifier, {
        language: request.language || 'uk'
      });

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
      if (comments.length > 0) {
        // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–ª—è —Ü—å–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É
        const deletedResult = await this.commentsService.clearByAppId(request.identifier);
        this.logger.log(`–í–∏–¥–∞–ª–µ–Ω–æ ${deletedResult.deletedCount} —Å—Ç–∞—Ä–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è ${request.identifier}`);
        
        // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
        await this.commentsService.bulkCreate(comments);
        this.logger.log(`–ó–±–µ—Ä–µ–∂–µ–Ω–æ ${comments.length} –Ω–æ–≤–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ App Store`);
      }

      return comments;

    } catch (error) {
      this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É App Store: ${error.message}`);
      throw error;
    }
  }

  private async parseGoogleSearchReviews(request: ParsingRequest): Promise<CreateCommentDto[]> {
    this.logger.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥ –≤—ñ–¥–≥—É–∫—ñ–≤ —á–µ—Ä–µ–∑ Google Search –¥–ª—è ${request.identifier}`);

    try {
      const comments = await this.serperService.parseGoogleSearchReviews(request.identifier, {
        language: request.language || 'uk'
      });

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
      if (comments.length > 0) {
        // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
        const deletedResult = await this.commentsService.clearByAppId(request.identifier);
        this.logger.log(`–í–∏–¥–∞–ª–µ–Ω–æ ${deletedResult.deletedCount} —Å—Ç–∞—Ä–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è ${request.identifier}`);
        
        // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
        await this.commentsService.bulkCreate(comments);
        this.logger.log(`–ó–±–µ—Ä–µ–∂–µ–Ω–æ ${comments.length} –Ω–æ–≤–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ Google Search`);
      }

      return comments;

    } catch (error) {
      this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É Google Search: ${error.message}`);
      throw error;
    }
  }

  async getAvailableTypes(): Promise<{ type: ParsingType; name: string; description: string; supported: boolean }[]> {
    return [
      {
        type: ParsingType.GOOGLE_MAPS,
        name: 'Google Maps',
        description: '–í—ñ–¥–≥—É–∫–∏ –∑ Google Maps —á–µ—Ä–µ–∑ serper.dev API',
        supported: true
      },
      {
        type: ParsingType.GOOGLE_PLAY,
        name: 'Google Play Store',
        description: '–í—ñ–¥–≥—É–∫–∏ –∑ Google Play Store —á–µ—Ä–µ–∑ serper.dev',
        supported: true
      },
      {
        type: ParsingType.APP_STORE,
        name: 'App Store',
        description: '–í—ñ–¥–≥—É–∫–∏ –∑ App Store —á–µ—Ä–µ–∑ serper.dev',
        supported: true
      },
      {
        type: ParsingType.GOOGLE_SEARCH,
        name: 'Google Search',
        description: '–ü–æ—à—É–∫ –≤—ñ–¥–≥—É–∫—ñ–≤ —á–µ—Ä–µ–∑ Google Search API',
        supported: true
      }
    ];
  }

  async testConnection(): Promise<{ success: boolean; message: string }> {
    try {
      const success = await this.serperService.testConnection();
      
      if (success) {
        return {
          success: true,
          message: '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ serper.dev —É—Å–ø—ñ—à–Ω–µ'
        };
      } else {
        return {
          success: false,
          message: '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ serper.dev –Ω–µ–≤–¥–∞–ª–µ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ API –∫–ª—é—á.'
        };
      }
    } catch (error) {
      return {
        success: false,
        message: `–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: ${error.message}`
      };
    }
  }
}
