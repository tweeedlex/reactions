import { Controller, Post, Get, Body, Query, Logger } from '@nestjs/common';
import { SerperParsingService, ParsingType } from './serper-parsing.service';
import { CreateCommentDto } from '../comments/dto/create-comment.dto';

export class ParsingRequestDto {
  type: ParsingType;
  identifier: string;
  language?: string;
  sortBy?: string;
  maxPages?: number;
}

@Controller('serper-parsing')
export class SerperParsingController {
  private readonly logger = new Logger(SerperParsingController.name);

  constructor(private readonly serperParsingService: SerperParsingService) {}

  @Post('parse')
  async parseReviews(@Body() request: ParsingRequestDto): Promise<{ comments: CreateCommentDto[]; count: number }> {
    this.logger.log(`üöÄ –ü–∞—Ä—Å–∏–Ω–≥ –≤—ñ–¥–≥—É–∫—ñ–≤ —á–µ—Ä–µ–∑ serper.dev: ${request.type} –¥–ª—è ${request.identifier}`);

    try {
      const result = await this.serperParsingService.parseReviews(request);
      
      this.logger.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ ${result.count} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤`);
      return result;
    } catch (error) {
      this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É: ${error.message}`);
      throw error;
    }
  }

  @Get('google-maps')
  async parseGoogleMaps(
    @Query('placeId') placeId: string,
    @Query('language') language?: string,
    @Query('sortBy') sortBy?: string
  ): Promise<{ comments: CreateCommentDto[]; count: number }> {
    this.logger.log(`üìç –ü–∞—Ä—Å–∏–Ω–≥ Google Maps: ${placeId}`);

    const request: ParsingRequestDto = {
      type: ParsingType.GOOGLE_MAPS,
      identifier: placeId,
      language: language || 'uk',
      sortBy: sortBy || 'newest'
    };

    return await this.parseReviews(request);
  }

  @Get('google-play')
  async parseGooglePlay(
    @Query('appId') appId: string,
    @Query('language') language?: string
  ): Promise<{ comments: CreateCommentDto[]; count: number }> {
    this.logger.log(`üì± –ü–∞—Ä—Å–∏–Ω–≥ Google Play Store: ${appId}`);

    const request: ParsingRequestDto = {
      type: ParsingType.GOOGLE_PLAY,
      identifier: appId,
      language: language || 'uk'
    };

    return await this.parseReviews(request);
  }

  @Get('app-store')
  async parseAppStore(
    @Query('appId') appId: string,
    @Query('language') language?: string
  ): Promise<{ comments: CreateCommentDto[]; count: number }> {
    this.logger.log(`üçé –ü–∞—Ä—Å–∏–Ω–≥ App Store: ${appId}`);

    const request: ParsingRequestDto = {
      type: ParsingType.APP_STORE,
      identifier: appId,
      language: language || 'uk'
    };

    return await this.parseReviews(request);
  }

  @Get('google-search')
  async parseGoogleSearch(
    @Query('query') query: string,
    @Query('language') language?: string
  ): Promise<{ comments: CreateCommentDto[]; count: number }> {
    this.logger.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ Google Search: ${query}`);

    const request: ParsingRequestDto = {
      type: ParsingType.GOOGLE_SEARCH,
      identifier: query,
      language: language || 'uk'
    };

    return await this.parseReviews(request);
  }

  @Get('types')
  async getAvailableTypes(): Promise<{ type: ParsingType; name: string; description: string; supported: boolean }[]> {
    this.logger.log('üìã –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–∞—Ä—Å–∏–Ω–≥—É');
    
    try {
      const types = await this.serperParsingService.getAvailableTypes();
      this.logger.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${types.length} —Ç–∏–ø—ñ–≤`);
      return types;
    } catch (error) {
      this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∏–ø—ñ–≤: ${error.message}`);
      throw error;
    }
  }

  @Get('test-connection')
  async testConnection(): Promise<{ success: boolean; message: string }> {
    this.logger.log('üîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ serper.dev');
    
    try {
      const result = await this.serperParsingService.testConnection();
      this.logger.log(`‚úÖ –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: ${result.success ? '—É—Å–ø—ñ—à–Ω–∏–π' : '–Ω–µ–≤–¥–∞–ª–∏–π'}`);
      return result;
    } catch (error) {
      this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ${error.message}`);
      return {
        success: false,
        message: `–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ${error.message}`
      };
    }
  }
}
