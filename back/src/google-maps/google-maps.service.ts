import { Injectable, Logger } from '@nestjs/common';
import { CommentsService } from '../comments/comments.service';
import { CreateCommentDto } from '../comments/dto/create-comment.dto';
import { SerpApiService } from '../serpapi/serpapi.service';
import fetch from 'node-fetch';

@Injectable()
export class GoogleMapsService {
  private readonly logger = new Logger(GoogleMapsService.name);

  constructor(
    private readonly commentsService: CommentsService,
    private readonly serpApiService: SerpApiService,
  ) {}

  async parseGoogleMapsReviews(url: string): Promise<number> {
    try {
      this.logger.log(`üöÄ –ü–∞—Ä—Å–∏–Ω–≥ –≤—ñ–¥–≥—É–∫—ñ–≤ Google Maps —á–µ—Ä–µ–∑ SerpAPI: ${url}`);
      
      // –î–æ–¥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å—å–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É (15 —Å–µ–∫—É–Ω–¥)
      const parsePromise = this.performParsing(url);
      const timeoutPromise = new Promise<number>((_, reject) => 
        setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–∞—Ä—Å–∏–Ω–≥—É Google Maps (15 —Å–µ–∫—É–Ω–¥)')), 15000)
      );
      
      return await Promise.race([parsePromise, timeoutPromise]);
    } catch (error) {
      this.logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É Google Maps: ${error.message}`);
      return 0;
    }
  }

  private async performParsing(url: string): Promise<number> {
    try {
      let placeId = await this.extractPlaceId(url);
      this.logger.log(`üìç –û—Ç—Ä–∏–º–∞–Ω–æ Place ID: ${placeId}`);
      
      if (!placeId) {
        this.logger.warn('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ Place ID –∑ URL, —Å–ø—Ä–æ–±—É—î–º–æ –ø–æ—à—É–∫...');
        // –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ü–µ —á–µ—Ä–µ–∑ –ø–æ—à—É–∫
        const foundPlaceId = await this.findPlaceIdBySearch(url);
        if (foundPlaceId) {
          placeId = foundPlaceId;
          this.logger.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ Place ID —á–µ—Ä–µ–∑ –ø–æ—à—É–∫: ${placeId}`);
        } else {
          this.logger.warn('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ Place ID –Ω—ñ –∑ URL, –Ω—ñ —á–µ—Ä–µ–∑ –ø–æ—à—É–∫');
          this.logger.warn('üö´ –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —Ü—å–æ–≥–æ URL');
          return 0;
        }
      }

      this.logger.log(`üìç Place ID –∑ URL: ${placeId}`);

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ Place ID –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è SerpAPI (–º–∞—î —Ñ–æ—Ä–º–∞—Ç ChIJ...)
      if (!placeId.startsWith('ChIJ')) {
        this.logger.log('‚ö†Ô∏è Place ID –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è SerpAPI, –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –∑–Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ –ø–æ—à—É–∫...');
        
        // –Ø–∫—â–æ —Ü–µ –∫–æ—Ä–æ—Ç–∫–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —Å–ø–æ—á–∞—Ç–∫—É —Ä–æ–∑–∫—Ä–∏–≤–∞—î–º–æ –π–æ–≥–æ
        let searchUrl = url;
        if (url.includes('goo.gl/maps/') || url.includes('maps.app.goo.gl/')) {
          const expandedUrl = await this.expandShortUrl(url);
          if (expandedUrl) {
            searchUrl = expandedUrl;
            this.logger.log(`–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–æ–∑–∫—Ä–∏—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –ø–æ—à—É–∫—É: ${searchUrl}`);
          }
        }
        
        // –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ü–µ —á–µ—Ä–µ–∑ –ø–æ—à—É–∫ –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∞–±–æ –Ω–∞–∑–≤–æ—é
        const foundPlaceId = await this.findPlaceIdBySearch(searchUrl);
        if (foundPlaceId) {
          placeId = foundPlaceId;
          this.logger.log(`–ó–Ω–∞–π–¥–µ–Ω–æ –ø—ñ–¥—Ö–æ–¥—è—â–∏–π Place ID: ${placeId}`);
        } else {
          this.logger.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø—ñ–¥—Ö–æ–¥—è—â–∏–π Place ID –¥–ª—è SerpAPI');
          // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ Place ID –∑ URL –Ω–∞–ø—Ä—è–º—É
          const directPlaceId = this.extractPlaceIdFromUrl(searchUrl);
          if (directPlaceId) {
            placeId = directPlaceId;
            this.logger.log(`–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Place ID –∑ URL: ${placeId}`);
          } else {
            // –°–ø—Ä–æ–±—É—î–º–æ –ø–æ—à—É–∫ –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            const coordinates = this.extractCoordinates(searchUrl);
            if (coordinates) {
              this.logger.log(`–°–ø—Ä–æ–±—É—î–º–æ –ø–æ—à—É–∫ –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: ${coordinates.lat}, ${coordinates.lng}`);
              const coordPlaceId = await this.searchPlaceByCoordinates(coordinates.lat, coordinates.lng);
              if (coordPlaceId) {
                placeId = coordPlaceId;
                this.logger.log(`–ó–Ω–∞–π–¥–µ–Ω–æ Place ID –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: ${placeId}`);
              } else {
                this.logger.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ Place ID –Ω—ñ —á–µ—Ä–µ–∑ –ø–æ—à—É–∫, –Ω—ñ –∑ URL, –Ω—ñ –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏');
                return 0;
              }
            } else {
              this.logger.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ Place ID –Ω—ñ —á–µ—Ä–µ–∑ –ø–æ—à—É–∫, –Ω—ñ –∑ URL, –Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
              return 0;
            }
          }
        }
      }

      const comments: CreateCommentDto[] = await this.serpApiService.parseGoogleMapsReviews(placeId);

      if (comments.length > 0) {
        this.logger.log(`–û—Ç—Ä–∏–º–∞–Ω–æ ${comments.length} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –∑ SerpAPI`);
        
        // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–ª—è —Ü—å–æ–≥–æ –º—ñ—Å—Ü—è
        const deletedResult = await this.commentsService.clearByAppId(placeId);
        this.logger.log(`–í–∏–¥–∞–ª–µ–Ω–æ ${deletedResult.deletedCount} —Å—Ç–∞—Ä–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è ${placeId}`);
        
        // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
        this.logger.log(`–°–ø—Ä–æ–±–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ${comments.length} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤...`);
        const savedComments = await this.commentsService.bulkCreate(comments);
        this.logger.log(`–ó–±–µ—Ä–µ–∂–µ–Ω–æ ${savedComments.length} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –∑ Google Maps`);
        return savedComments.length;
      } else {
        this.logger.warn('SerpAPI –Ω–µ –∑–Ω–∞–π—à–æ–≤ –≤—ñ–¥–≥—É–∫—ñ–≤ –¥–ª—è Google Maps');
        return 0;
      }

    } catch (error) {
      this.logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É Google Maps —á–µ—Ä–µ–∑ SerpAPI: ${error.message}`);
      this.logger.error(`–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: ${JSON.stringify(error, null, 2)}`);
      
      // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –ø–æ–≤'—è–∑–∞–Ω–∞ –∑ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–º Place ID, —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π
      if (error.message && error.message.includes('Place ID')) {
        this.logger.log('–°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π Place ID...');
        try {
          const alternativePlaceId = await this.findAlternativePlaceId(url);
          if (alternativePlaceId) {
            this.logger.log(`–ó–Ω–∞–π–¥–µ–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π Place ID: ${alternativePlaceId}`);
            return await this.parseGoogleMapsReviews(alternativePlaceId);
          }
        } catch (altError) {
          this.logger.error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π Place ID: ${altError.message}`);
        }
      }
      
      throw error;
    }
  }

  async testGoogleMapsConnection(): Promise<boolean> {
    try {
      return await this.serpApiService.testConnection();
    } catch (error) {
      this.logger.error(`–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è SerpAPI –¥–ª—è Google Maps: ${error.message}`);
      return false;
    }
  }

  private async extractPlaceId(url: string): Promise<string> {
    try {
      // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∫–æ—Ä–æ—Ç–∫–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
      if (url.includes('goo.gl/maps/') || url.includes('maps.app.goo.gl/')) {
        this.logger.log(`–†–æ–∑–∫—Ä–∏–≤–∞—î–º–æ –∫–æ—Ä–æ—Ç–∫–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: ${url}`);
        const expandedUrl = await this.expandShortUrl(url);
        if (expandedUrl) {
          this.logger.log(`–†–æ–∑–∫—Ä–∏—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: ${expandedUrl}`);
          return await this.extractPlaceId(expandedUrl);
        }
      }

      // –†—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ Google Maps URL
      const patterns = [
        // https://www.google.com/maps/place/Place+Name/@lat,lng,zoom/data=!3m1!4b1!4m6!3m5!1s0x1234567890abcdef:0x1234567890abcdef!8m2!3d40.7128!4d-74.0060!16s%2Fg%2F11abc123def
        /!1s([^!]+)/,
        // https://maps.google.com/maps?cid=1234567890123456789
        /[?&]cid=([^&]+)/,
        // https://www.google.com/maps/place/Place+Name/@lat,lng,zoom/data=!4m5!3m4!1s0x1234567890abcdef:0x1234567890abcdef!8m2!3d40.7128!4d-74.0060
        /!1s([^!]+)/,
      ];

      for (const pattern of patterns) {
        const match = url.match(pattern);
        if (match && match[1]) {
          const placeId = match[1];
          this.logger.log(`–í–∏—Ç—è–≥–Ω—É—Ç–æ Place ID: ${placeId} –∑ URL: ${url}`);
          return placeId;
        }
      }

      // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ —á–µ—Ä–µ–∑ regex, —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ –∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
      const urlObj = new URL(url);
      const cid = urlObj.searchParams.get('cid');
      if (cid) {
        this.logger.log(`–í–∏—Ç—è–≥–Ω—É—Ç–æ Place ID –∑ cid –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: ${cid}`);
        return cid;
      }

      this.logger.warn(`–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ Place ID –∑ URL: ${url}`);
      return '';
    } catch (error) {
      this.logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É URL: ${error.message}`);
      return '';
    }
  }

  private extractPlaceIdFromUrl(url: string): string | null {
    try {
      // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ Place ID –∑ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ URL
      const patterns = [
        /!1s([^!]+)/,  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
        /[?&]cid=([^&]+)/,  // CID –ø–∞—Ä–∞–º–µ—Ç—Ä
        /place_id=([^&]+)/,  // Place ID –ø–∞—Ä–∞–º–µ—Ç—Ä
        /!3d([^!]+)/,  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
        /@[^/]+\/data=!4m[^!]*!1s([^!]+)/  // –°–∫–ª–∞–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
      ];

      for (const pattern of patterns) {
        const match = url.match(pattern);
        if (match && match[1]) {
          const placeId = match[1];
          this.logger.log(`–í–∏—Ç—è–≥–Ω—É—Ç–æ Place ID –∑ URL: ${placeId}`);
          return placeId;
        }
      }

      this.logger.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ Place ID –∑ URL');
      return null;
    } catch (error) {
      this.logger.error(`–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥–Ω–µ–Ω–Ω—è Place ID –∑ URL: ${error.message}`);
      return null;
    }
  }

  async expandShortUrl(shortUrl: string): Promise<string | null> {
    try {
      this.logger.log(`–°–ø—Ä–æ–±–∞ —Ä–æ–∑–∫—Ä–∏—Ç—Ç—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: ${shortUrl}`);
      const response = await fetch(shortUrl, {
        method: 'HEAD',
        redirect: 'follow'
      });
      const expandedUrl = response.url;
      this.logger.log(`–†–æ–∑–∫—Ä–∏—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: ${expandedUrl}`);
      return expandedUrl;
    } catch (error) {
      this.logger.error(`–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–∫—Ä–∏—Ç—Ç—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: ${error.message}`);
      return null;
    }
  }

  private async findPlaceIdBySearch(url: string): Promise<string | null> {
    try {
      // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –∑–∞ –Ω–∞–∑–≤–æ—é (—Ü–µ –ø—Ä–∞—Ü—é—î –∫—Ä–∞—â–µ)
      const placeName = this.extractPlaceName(url);
      if (placeName) {
        this.logger.log(`–°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∑–∞ –Ω–∞–∑–≤–æ—é: ${placeName}`);
        const placeId = await this.searchPlaceByName(placeName);
        if (placeId) {
          return placeId;
        }
      }

      // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–∞ –Ω–∞–∑–≤–æ—é, —Å–ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫
      this.logger.log('–°–ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫...');
      const extendedPlaceId = await this.searchPlaceByExtendedTerms(url);
      if (extendedPlaceId) {
        return extendedPlaceId;
      }

      // –í–∏—Ç—è–≥—É—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑ URL (—è–∫ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç)
      const coordinates = this.extractCoordinates(url);
      if (coordinates) {
        this.logger.log(`–ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: ${coordinates.lat}, ${coordinates.lng}`);
        
        // –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ü–µ –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —á–µ—Ä–µ–∑ SerpAPI
        const placeId = await this.searchPlaceByCoordinates(coordinates.lat, coordinates.lng);
        if (placeId) {
          return placeId;
        }
      }
      
      this.logger.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ü–µ –∑–∞ –Ω–∞–∑–≤–æ—é –∞–±–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∑ URL');
      return null;
    } catch (error) {
      this.logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –º—ñ—Å—Ü—è: ${error.message}`);
      return null;
    }
  }

  private extractCoordinates(url: string): { lat: number; lng: number } | null {
    try {
      // –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ —Ç–æ—á–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ (—Ñ–æ—Ä–º–∞—Ç !8m2!3dlat!4dlng)
      const preciseMatch = url.match(/!8m2!3d(-?\d+\.?\d*)!4d(-?\d+\.?\d*)/);
      if (preciseMatch) {
        return {
          lat: parseFloat(preciseMatch[1]),
          lng: parseFloat(preciseMatch[2])
        };
      }
      
      // –Ø–∫—â–æ —Ç–æ—á–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —à—É–∫–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ (—Ñ–æ—Ä–º–∞—Ç @lat,lng)
      const match = url.match(/@(-?\d+\.?\d*),(-?\d+\.?\d*)/);
      if (match) {
        return {
          lat: parseFloat(match[1]),
          lng: parseFloat(match[2])
        };
      }
      return null;
    } catch (error) {
      this.logger.error(`–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥–Ω–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${error.message}`);
      return null;
    }
  }

  private extractPlaceName(url: string): string | null {
    try {
      // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ü—è –∑ URL
      const patterns = [
        /place\/([^/@]+)/,  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
        /place\/%([^/@]+)/, // URL-encoded —Ñ–æ—Ä–º–∞—Ç
        /place\/([^/]+)/    // –ë—ñ–ª—å—à –∑–∞–≥–∞–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
      ];
      
      for (const pattern of patterns) {
        const match = url.match(pattern);
        if (match) {
          let placeName = match[1];
          // –î–µ–∫–æ–¥—É—î–º–æ URL-encoded —Å–∏–º–≤–æ–ª–∏
          try {
            placeName = decodeURIComponent(placeName);
          } catch (e) {
            // –Ø–∫—â–æ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —è–∫ —î
          }
          // –ó–∞–º—ñ–Ω—é—î–º–æ + –Ω–∞ –ø—Ä–æ–±—ñ–ª–∏
          placeName = placeName.replace(/\+/g, ' ');
          // –û—á–∏—â–∞—î–º–æ –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
          placeName = placeName.replace(/[()]/g, '').trim();
          
          if (placeName && placeName.length > 2) {
            this.logger.log(`–í–∏—Ç—è–≥–Ω—É—Ç–æ –Ω–∞–∑–≤—É –º—ñ—Å—Ü—è: "${placeName}"`);
            return placeName;
          }
        }
      }
      
      this.logger.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ü—è –∑ URL');
      return null;
    } catch (error) {
      this.logger.error(`–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥–Ω–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –º—ñ—Å—Ü—è: ${error.message}`);
      return null;
    }
  }

  private async searchPlaceByCoordinates(lat: number, lng: number): Promise<string | null> {
    try {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ SerpAPI –¥–ª—è –ø–æ—à—É–∫—É –º—ñ—Å—Ü—è –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
      const response = await this.serpApiService.searchPlaceByCoordinates(lat, lng);
      return response;
    } catch (error) {
      this.logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: ${error.message}`);
      return null;
    }
  }

  private async searchPlaceByName(placeName: string): Promise<string | null> {
    try {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ SerpAPI –¥–ª—è –ø–æ—à—É–∫—É –º—ñ—Å—Ü—è –∑–∞ –Ω–∞–∑–≤–æ—é
      const response = await this.serpApiService.searchPlaceByName(placeName);
      return response;
    } catch (error) {
      this.logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∑–∞ –Ω–∞–∑–≤–æ—é: ${error.message}`);
      return null;
    }
  }

  private async searchPlaceByExtendedTerms(url: string): Promise<string | null> {
    try {
      const placeName = this.extractPlaceName(url);
      if (!placeName) {
        return null;
      }

      // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –ø–æ—à—É–∫—É –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –±–µ–∑–∫—ñ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª—É
      const searchTerms = [
        placeName, // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ —Ç–æ—á–Ω—É –Ω–∞–∑–≤—É
        `${placeName} –ö–∏—ó–≤ –£–∫—Ä–∞—ó–Ω–∞`,
        `${placeName} Kyiv Ukraine`,
        `${placeName} –ö–∏—ó–≤`,
        `${placeName} –£–∫—Ä–∞—ó–Ω–∞`,
        `${placeName} Kyiv`,
        `${placeName} Ukraine`
      ];

      // –û–±–º–µ–∂—É—î–º–æ –¥–æ 7 —Å–ø—Ä–æ–± (–ø–µ—Ä—à—ñ 7 —Ç–µ—Ä–º—ñ–Ω—ñ–≤)
      const limitedTerms = searchTerms.slice(0, 7);
      
      for (let i = 0; i < limitedTerms.length; i++) {
        const term = limitedTerms[i];
        this.logger.log(`–°–ø—Ä–æ–±—É—î–º–æ –ø–æ—à—É–∫ (${i + 1}/${limitedTerms.length}): "${term}"`);
        
        try {
          // –î–æ–¥–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–æ—à—É–∫—É (3 —Å–µ–∫—É–Ω–¥–∏)
          const searchPromise = this.serpApiService.searchPlaceByName(term);
          const timeoutPromise = new Promise<string | null>((_, reject) => 
            setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ—à—É–∫—É')), 3000)
          );
          
          const response = await Promise.race([searchPromise, timeoutPromise]) as string | null;
          
          if (response) {
            this.logger.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –º—ñ—Å—Ü–µ –∑–∞ —Ç–µ—Ä–º—ñ–Ω–æ–º: "${term}", Place ID: ${response}`);
            return response;
          } else {
            this.logger.log(`‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –º—ñ—Å—Ü–µ –∑–∞ —Ç–µ—Ä–º—ñ–Ω–æ–º: "${term}"`);
          }
        } catch (error) {
          this.logger.warn(`–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∑–∞ —Ç–µ—Ä–º—ñ–Ω–æ–º "${term}": ${error.message}`);
          // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º —Ç–µ—Ä–º—ñ–Ω–æ–º
        }
      }

      this.logger.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ü–µ —á–µ—Ä–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫');
      return null;
    } catch (error) {
      this.logger.error(`–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É: ${error.message}`);
      return null;
    }
  }

  private async findAlternativePlaceId(url: string): Promise<string | null> {
    try {
      this.logger.log(`–ü–æ—à—É–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ Place ID –¥–ª—è URL: ${url}`);
      
      // –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –º–µ—Ç–æ–¥–∏ –ø–æ—à—É–∫—É
      const methods = [
        () => this.findPlaceIdBySearch(url),
        () => this.searchPlaceByCoordinates(this.extractCoordinates(url)?.lat || 0, this.extractCoordinates(url)?.lng || 0),
        () => this.searchPlaceByName(this.extractPlaceName(url) || '')
      ];

      for (const method of methods) {
        try {
          const result = await method();
          if (result) {
            this.logger.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π Place ID: ${result}`);
            return result;
          }
        } catch (error) {
          this.logger.warn(`–ú–µ—Ç–æ–¥ –ø–æ—à—É–∫—É –Ω–µ –≤–¥–∞–≤—Å—è: ${error.message}`);
        }
      }

      this.logger.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π Place ID');
      return null;
    } catch (error) {
      this.logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ Place ID: ${error.message}`);
      return null;
    }
  }

}
