import { Injectable, Logger } from '@nestjs/common';
import axios from 'axios';
import { SerperReviewsDto, SerperReviewsResponse, SerperReview, SortBy } from './dto/serper-reviews.dto';
import { CreateCommentDto } from '../comments/dto/create-comment.dto';

export enum SerperSource {
  GOOGLE_MAPS = 'google_maps',
  GOOGLE_SEARCH = 'google_search',
  GOOGLE_PLAY = 'google_play',
  APP_STORE = 'app_store'
}

@Injectable()
export class SerperService {
  private readonly logger = new Logger(SerperService.name);
  private readonly apiKey: string;
  private readonly baseUrl = 'https://google.serper.dev/reviews';

  constructor() {
    this.apiKey = process.env.SERPER_API_KEY || '37843c7b4f2d2571cb4db43512a5340041856528';
    
    if (!this.apiKey || this.apiKey === 'your_serper_key_here') {
      this.logger.error('SERPER_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–±–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ');
      this.logger.error('–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ SERPER_API_KEY –≤ .env —Ñ–∞–π–ª—ñ');
    } else {
      this.logger.log('SerperService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ API –∫–ª—é—á–µ–º');
    }
  }

  async getGoogleMapsReviews(placeId: string, options?: Partial<SerperReviewsDto>): Promise<SerperReviewsResponse> {
    if (!this.apiKey) {
      throw new Error('SERPER_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }

    try {
      this.logger.log(`üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤ Google Maps –¥–ª—è placeId: ${placeId}`);

      const requestData: SerperReviewsDto = {
        placeId,
        hl: 'uk',
        sortBy: SortBy.NEWEST,
        ...options
      };

      this.logger.log(`üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ serper.dev –∑ –¥–∞–Ω–∏–º–∏: ${JSON.stringify(requestData, null, 2)}`);

      const response = await axios.post(this.baseUrl, requestData, {
        headers: {
          'X-API-KEY': this.apiKey,
          'Content-Type': 'application/json'
        },
        timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });

      this.logger.log(`üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ serper.dev: ${response.status}`);
      this.logger.log(`üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${JSON.stringify(Object.keys(response.data))}`);

      // –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ serper.dev
      const reviews = this.processSerperResponse(response.data);
      
      const result: SerperReviewsResponse = {
        reviews,
        nextPageToken: response.data.nextPageToken,
        placeInfo: {
          title: response.data.placeInfo?.title || '–ù–µ–≤—ñ–¥–æ–º–∞ –Ω–∞–∑–≤–∞',
          address: response.data.placeInfo?.address || '',
          rating: response.data.placeInfo?.rating || 0,
          totalReviews: response.data.placeInfo?.totalReviews || 0
        }
      };

      this.logger.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ ${reviews.length} –≤—ñ–¥–≥—É–∫—ñ–≤`);
      return result;

    } catch (error) {
      this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤ –∑ serper.dev: ${error.message}`);
      
      if (error.response) {
        this.logger.error(`üìä –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${error.response.status}`);
        this.logger.error(`üìä –î–∞–Ω—ñ –ø–æ–º–∏–ª–∫–∏: ${JSON.stringify(error.response.data)}`);
      }
      
      throw error;
    }
  }

  async parseGoogleMapsReviews(placeId: string, options?: Partial<SerperReviewsDto>): Promise<CreateCommentDto[]> {
    try {
      this.logger.log(`üöÄ –ü–∞—Ä—Å–∏–Ω–≥ –≤—ñ–¥–≥—É–∫—ñ–≤ Google Maps —á–µ—Ä–µ–∑ serper.dev –¥–ª—è placeId: ${placeId}`);

      const response = await this.getGoogleMapsReviews(placeId, options);
      const comments: CreateCommentDto[] = [];
      const seenComments = new Set<string>();

      this.logger.log(`üìä –û—Ç—Ä–∏–º–∞–Ω–æ ${response.reviews.length} –≤—ñ–¥–≥—É–∫—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏`);

      for (const review of response.reviews) {
        try {
          const comment = this.convertSerperReviewToComment(review, placeId, response.placeInfo?.title);
          
          if (comment) {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏
            const commentKey = `${comment.content}|${comment.author}|${comment.rating}`;
            if (!seenComments.has(commentKey)) {
              seenComments.add(commentKey);
              comments.push(comment);
              this.logger.debug(`‚úÖ –î–æ–¥–∞–Ω–æ –∫–æ–º–µ–Ω—Ç–∞—Ä: ${comment.content.substring(0, 30)}...`);
            } else {
              this.logger.debug(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç: ${comment.content.substring(0, 30)}...`);
            }
          } else {
            this.logger.debug(`‚ùå –ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –ø—Ä–æ–π—à–æ–≤ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é`);
          }
        } catch (error) {
          this.logger.warn(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–≥—É–∫—É: ${error.message}`);
        }
      }

      this.logger.log(`üéâ –£—Å–ø—ñ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ ${comments.length} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤`);
      return comments;

    } catch (error) {
      this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –≤—ñ–¥–≥—É–∫—ñ–≤: ${error.message}`);
      throw error;
    }
  }

  private processSerperResponse(data: any): SerperReview[] {
    try {
      // serper.dev –º–æ–∂–µ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –≤—ñ–¥–≥—É–∫–∏ –≤ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
      let reviews: any[] = [];

      if (data.reviews && Array.isArray(data.reviews)) {
        reviews = data.reviews;
      } else if (data.data && Array.isArray(data.data)) {
        reviews = data.data;
      } else if (Array.isArray(data)) {
        reviews = data;
      } else {
        this.logger.warn(`‚ö†Ô∏è –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ serper.dev: ${JSON.stringify(Object.keys(data))}`);
        return [];
      }

      this.logger.log(`üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${reviews.length} –≤—ñ–¥–≥—É–∫—ñ–≤ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ`);

      return reviews.map(review => this.normalizeSerperReview(review));

    } catch (error) {
      this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ serper.dev: ${error.message}`);
      return [];
    }
  }

  private normalizeSerperReview(review: any): SerperReview {
    return {
      author: review.user?.name || review.author || review.user_name || review.name || review.reviewer_name || '–ê–Ω–æ–Ω—ñ–º–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á',
      content: review.snippet || review.translatedSnippet || review.content || review.text || review.review_text || review.comment || '',
      rating: this.extractRating(review),
      date: review.isoDate || review.date || review.created_at || review.published_at || new Date().toISOString(),
      helpfulVotes: review.likes || review.helpful_votes || review.upvotes || 0,
      profilePhotoUrl: review.user?.thumbnail || review.profile_photo_url || review.avatar_url || review.photo_url,
      isVerified: review.is_verified || review.verified || false
    };
  }

  private extractRating(review: any): number {
    const rating = review.rating || review.stars || review.score || review.rating_value;
    
    if (typeof rating === 'number') {
      return Math.min(Math.max(rating, 1), 5);
    }
    
    if (typeof rating === 'string') {
      const match = rating.match(/(\d+(?:\.\d+)?)/);
      if (match) {
        const numRating = parseFloat(match[1]);
        return Math.min(Math.max(numRating, 1), 5);
      }
    }

    return 0;
  }

  private convertSerperReviewToComment(
    review: SerperReview, 
    placeId: string, 
    placeName?: string
  ): CreateCommentDto | null {
    try {
      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è
      if (!review.content || review.content.length < 3) {
        this.logger.debug(`‚ùå –í—ñ–¥–≥—É–∫ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (${review.content?.length || 0} —Å–∏–º–≤–æ–ª—ñ–≤)`);
        return null;
      }

      if (!this.isValidReview(review.content, review.author)) {
        this.logger.debug(`‚ùå –í—ñ–¥–≥—É–∫ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∞–±–æ –∞–≤—Ç–æ—Ä`);
        return null;
      }

      const comment: CreateCommentDto = {
        appId: placeId,
        appName: placeName || '–ù–µ–≤—ñ–¥–æ–º–∞ –Ω–∞–∑–≤–∞',
        store: 'googlemaps' as 'googlemaps',
        content: review.content.trim(),
        author: review.author.trim(),
        rating: review.rating,
        reviewDate: this.parseDate(review.date),
        helpfulVotes: review.helpfulVotes || 0,
      };

      return comment;

    } catch (error) {
      this.logger.warn(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≤—ñ–¥–≥—É–∫—É: ${error.message}`);
      return null;
    }
  }

  private parseDate(dateString: string): Date {
    try {
      if (!dateString) return new Date();
      
      const date = new Date(dateString);
      if (!isNaN(date.getTime())) {
        return date;
      }

      return new Date();
    } catch (error) {
      this.logger.warn(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç–∏: ${dateString}`);
      return new Date();
    }
  }

  private isValidReview(content: string, author: string): boolean {
    try {
      const normalizedContent = content.trim();
      const normalizedAuthor = author.trim();

      if (!normalizedContent || normalizedContent.length === 0) {
        return false;
      }

      // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ñ–∞–ª—å—à–∏–≤–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
      const suspiciousPatterns = [
        /^[A-Z\s]+$/, // –¢—ñ–ª—å–∫–∏ –≤–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏
        /^\d+$/, // –¢—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏
        /^(good|bad|great|awesome|terrible|amazing|worst|best|ok|okay|nice|cool|wow|omg)$/i,
        /^(5|4|3|2|1)\s*stars?$/i,
        /^–∑–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥/i,
        /^—Å–∏—Å—Ç–µ–º–∞/i,
        /^–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ/i,
        /^test/i,
        /^spam/i,
        /^fake/i,
        /^bot/i,
        /^admin/i,
        /^developer/i,
        /^staff/i,
        /^support/i,
      ];

      for (const pattern of suspiciousPatterns) {
        if (pattern.test(normalizedContent)) {
          return false;
        }
      }

      if (normalizedContent.length < 3) {
        return false;
      }

      const systemAuthors = [
        '—Å–∏—Å—Ç–µ–º–∞', 'system', 'admin', '–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä', '–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ', 
        '–∞–Ω–æ–Ω—ñ–º–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á', 'anonymous', 'guest', 'user', 'test',
        'bot', 'spam', 'fake', 'developer', 'staff', 'support'
      ];
      
      if (systemAuthors.some(sa => normalizedAuthor.toLowerCase().includes(sa.toLowerCase()))) {
        return false;
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ —Å–∏–º–≤–æ–ª–∏
      const repeatedChars = /(.)\1{4,}/;
      if (repeatedChars.test(normalizedContent)) {
        return false;
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–Ω–∞–∫—ñ–≤ –æ–∫–ª–∏–∫—É
      const exclamationCount = (normalizedContent.match(/!/g) || []).length;
      if (exclamationCount > 3) {
        return false;
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ HTML —Ç–µ–≥–∏
      if (/<[^>]+>/.test(normalizedContent)) {
        return false;
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ URL-–∞–¥—Ä–µ—Å–∏
      if (/https?:\/\/[^\s]+/.test(normalizedContent)) {
        return false;
      }

      return true;

    } catch (error) {
      this.logger.warn(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –≤—ñ–¥–≥—É–∫—É: ${error.message}`);
      return false;
    }
  }

  // –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥—É
  async parseReviews(source: SerperSource, identifier: string, options?: any): Promise<CreateCommentDto[]> {
    this.logger.log(`üîß –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ serper.dev: ${source} –¥–ª—è ${identifier}`);

    switch (source) {
      case SerperSource.GOOGLE_MAPS:
        return await this.parseGoogleMapsReviews(identifier, options);
      
      case SerperSource.GOOGLE_SEARCH:
        return await this.parseGoogleSearchReviews(identifier, options);
      
      case SerperSource.GOOGLE_PLAY:
        return await this.parseGooglePlayReviews(identifier, options);
      
      case SerperSource.APP_STORE:
        return await this.parseAppStoreReviews(identifier, options);
      
      default:
        throw new Error(`–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–µ –¥–∂–µ—Ä–µ–ª–æ: ${source}`);
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ Google Search (–¥–ª—è –ø–æ—à—É–∫—É –≤—ñ–¥–≥—É–∫—ñ–≤)
  async parseGoogleSearchReviews(query: string, options?: any): Promise<CreateCommentDto[]> {
    this.logger.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥ –≤—ñ–¥–≥—É–∫—ñ–≤ —á–µ—Ä–µ–∑ Google Search: ${query}`);

    try {
      const searchQuery = `${query} reviews site:play.google.com OR site:apps.apple.com`;
      
      const response = await axios.post('https://google.serper.dev/search', {
        q: searchQuery,
        num: 20,
        hl: options?.language || 'uk'
      }, {
        headers: {
          'X-API-KEY': this.apiKey,
          'Content-Type': 'application/json'
        }
      });

      const comments: CreateCommentDto[] = [];
      const seenComments = new Set<string>();

      if (response.data.organic) {
        for (const result of response.data.organic) {
          try {
            // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ –≤—ñ–¥–≥—É–∫–∏ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É
            const comment = this.extractReviewFromSearchResult(result, query);
            if (comment) {
              const commentKey = `${comment.content}|${comment.author}|${comment.rating}`;
              if (!seenComments.has(commentKey)) {
                seenComments.add(commentKey);
                comments.push(comment);
              }
            }
          } catch (error) {
            this.logger.warn(`–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø–æ—à—É–∫—É: ${error.message}`);
          }
        }
      }

      this.logger.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${comments.length} –≤—ñ–¥–≥—É–∫—ñ–≤ —á–µ—Ä–µ–∑ Google Search`);
      return comments;

    } catch (error) {
      this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —á–µ—Ä–µ–∑ Google Search: ${error.message}`);
      throw error;
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ Google Play Store —á–µ—Ä–µ–∑ –ø–æ—à—É–∫
  async parseGooglePlayReviews(appId: string, options?: any): Promise<CreateCommentDto[]> {
    this.logger.log(`üì± –ü–∞—Ä—Å–∏–Ω–≥ Google Play Store —á–µ—Ä–µ–∑ serper.dev: ${appId}`);

    try {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Google Search –¥–ª—è –ø–æ—à—É–∫—É –≤—ñ–¥–≥—É–∫—ñ–≤
      const searchQuery = `"${appId}" reviews "rating" site:play.google.com`;
      
      const response = await axios.post('https://google.serper.dev/search', {
        q: searchQuery,
        num: 20,
        hl: options?.language || 'uk'
      }, {
        headers: {
          'X-API-KEY': this.apiKey,
          'Content-Type': 'application/json'
        }
      });

      const comments: CreateCommentDto[] = [];
      const seenComments = new Set<string>();

      if (response.data.organic) {
        for (const result of response.data.organic) {
          try {
            const comment = this.extractPlayStoreReviewFromSearchResult(result, appId);
            if (comment) {
              const commentKey = `${comment.content}|${comment.author}|${comment.rating}`;
              if (!seenComments.has(commentKey)) {
                seenComments.add(commentKey);
                comments.push(comment);
              }
            }
          } catch (error) {
            this.logger.warn(`–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É Play Store: ${error.message}`);
          }
        }
      }

      this.logger.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${comments.length} –≤—ñ–¥–≥—É–∫—ñ–≤ Google Play Store`);
      return comments;

    } catch (error) {
      this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É Google Play Store: ${error.message}`);
      throw error;
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ App Store —á–µ—Ä–µ–∑ –ø–æ—à—É–∫
  async parseAppStoreReviews(appId: string, options?: any): Promise<CreateCommentDto[]> {
    this.logger.log(`üçé –ü–∞—Ä—Å–∏–Ω–≥ App Store —á–µ—Ä–µ–∑ serper.dev: ${appId}`);

    try {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Google Search –¥–ª—è –ø–æ—à—É–∫—É –≤—ñ–¥–≥—É–∫—ñ–≤
      const searchQuery = `"${appId}" reviews site:apps.apple.com`;
      
      const response = await axios.post('https://google.serper.dev/search', {
        q: searchQuery,
        num: 20,
        hl: options?.language || 'uk'
      }, {
        headers: {
          'X-API-KEY': this.apiKey,
          'Content-Type': 'application/json'
        }
      });

      const comments: CreateCommentDto[] = [];
      const seenComments = new Set<string>();

      if (response.data.organic) {
        for (const result of response.data.organic) {
          try {
            const comment = this.extractAppStoreReviewFromSearchResult(result, appId);
            if (comment) {
              const commentKey = `${comment.content}|${comment.author}|${comment.rating}`;
              if (!seenComments.has(commentKey)) {
                seenComments.add(commentKey);
                comments.push(comment);
              }
            }
          } catch (error) {
            this.logger.warn(`–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É App Store: ${error.message}`);
          }
        }
      }

      this.logger.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${comments.length} –≤—ñ–¥–≥—É–∫—ñ–≤ App Store`);
      return comments;

    } catch (error) {
      this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É App Store: ${error.message}`);
      throw error;
    }
  }

  // –í–∏—Ç—è–≥–Ω–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø–æ—à—É–∫—É
  private extractReviewFromSearchResult(result: any, query: string): CreateCommentDto | null {
    try {
      const content = result.snippet || result.description || '';
      const title = result.title || '';
      
      if (!content || content.length < 10) {
        return null;
      }

      // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ –∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É
      const ratingMatch = content.match(/(\d+)\s*–∑—ñ—Ä–∫|(\d+)\s*star|(\d+)\s*‚òÖ/i);
      const rating = ratingMatch ? parseInt(ratingMatch[1] || ratingMatch[2] || ratingMatch[3]) : 0;

      return {
        appId: query,
        appName: title,
        store: 'search' as any,
        content: content.trim(),
        author: '–ü–æ—à—É–∫ Google',
        rating: Math.min(Math.max(rating, 1), 5),
        reviewDate: new Date(),
        helpfulVotes: 0,
      };
    } catch (error) {
      this.logger.warn(`–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥–Ω–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É: ${error.message}`);
      return null;
    }
  }

  // –í–∏—Ç—è–≥–Ω–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É Play Store –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø–æ—à—É–∫—É
  private extractPlayStoreReviewFromSearchResult(result: any, appId: string): CreateCommentDto | null {
    try {
      const content = result.snippet || result.description || '';
      const title = result.title || '';
      
      if (!content || content.length < 10) {
        return null;
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ —Å–ø—Ä–∞–≤–¥—ñ –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –¥–æ–¥–∞—Ç–æ–∫
      if (!content.toLowerCase().includes('review') && 
          !content.toLowerCase().includes('–≤—ñ–¥–≥—É–∫') &&
          !content.toLowerCase().includes('rating') &&
          !content.toLowerCase().includes('–∑—ñ—Ä–∫')) {
        return null;
      }

      // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ –∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É
      const ratingMatch = content.match(/(\d+)\s*–∑—ñ—Ä–∫|(\d+)\s*star|(\d+)\s*‚òÖ|(\d+)\s*\/\s*5/i);
      const rating = ratingMatch ? parseInt(ratingMatch[1] || ratingMatch[2] || ratingMatch[3] || ratingMatch[4]) : 0;

      // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥, —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
      const titleRatingMatch = title.match(/(\d+)\s*–∑—ñ—Ä–∫|(\d+)\s*star|(\d+)\s*‚òÖ/i);
      const titleRating = titleRatingMatch ? parseInt(titleRatingMatch[1] || titleRatingMatch[2] || titleRatingMatch[3]) : 0;

      const finalRating = rating || titleRating || 3; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 3 –∑—ñ—Ä–∫–∏

      return {
        appId,
        appName: title,
        store: 'playstore' as any,
        content: content.trim(),
        author: 'Google Play',
        rating: Math.min(Math.max(finalRating, 1), 5),
        reviewDate: new Date(),
        helpfulVotes: 0,
      };
    } catch (error) {
      this.logger.warn(`–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥–Ω–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É Play Store: ${error.message}`);
      return null;
    }
  }

  // –í–∏—Ç—è–≥–Ω–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É App Store –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø–æ—à—É–∫—É
  private extractAppStoreReviewFromSearchResult(result: any, appId: string): CreateCommentDto | null {
    try {
      const content = result.snippet || result.description || '';
      const title = result.title || '';
      
      if (!content || content.length < 10) {
        return null;
      }

      // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ –∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É
      const ratingMatch = content.match(/(\d+)\s*–∑—ñ—Ä–∫|(\d+)\s*star|(\d+)\s*‚òÖ/i);
      const rating = ratingMatch ? parseInt(ratingMatch[1] || ratingMatch[2] || ratingMatch[3]) : 0;

      return {
        appId,
        appName: title,
        store: 'appstore' as any,
        content: content.trim(),
        author: 'App Store',
        rating: Math.min(Math.max(rating, 1), 5),
        reviewDate: new Date(),
        helpfulVotes: 0,
      };
    } catch (error) {
      this.logger.warn(`–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥–Ω–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É App Store: ${error.message}`);
      return null;
    }
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
  async getAvailableSources(): Promise<{ source: SerperSource; name: string; description: string; supported: boolean }[]> {
    return [
      {
        source: SerperSource.GOOGLE_MAPS,
        name: 'Google Maps',
        description: '–í—ñ–¥–≥—É–∫–∏ –∑ Google Maps —á–µ—Ä–µ–∑ serper.dev API',
        supported: true
      },
      {
        source: SerperSource.GOOGLE_SEARCH,
        name: 'Google Search',
        description: '–ü–æ—à—É–∫ –≤—ñ–¥–≥—É–∫—ñ–≤ —á–µ—Ä–µ–∑ Google Search',
        supported: true
      },
      {
        source: SerperSource.GOOGLE_PLAY,
        name: 'Google Play Store',
        description: '–í—ñ–¥–≥—É–∫–∏ –∑ Google Play Store —á–µ—Ä–µ–∑ –ø–æ—à—É–∫',
        supported: true
      },
      {
        source: SerperSource.APP_STORE,
        name: 'App Store',
        description: '–í—ñ–¥–≥—É–∫–∏ –∑ App Store —á–µ—Ä–µ–∑ –ø–æ—à—É–∫',
        supported: true
      }
    ];
  }

  async testConnection(): Promise<boolean> {
    try {
      if (!this.apiKey || this.apiKey === 'your_serper_key_here') {
        this.logger.error('‚ùå SERPER_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–±–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ');
        return false;
      }

      // –¢–µ—Å—Ç—É—î–º–æ –∑ –ø—Ä–æ—Å—Ç–∏–º –∑–∞–ø–∏—Ç–æ–º
      const testPlaceId = 'ChIJN1t_tDeuEmsRUsoyG83frY4'; // –¢–µ—Å—Ç–æ–≤–µ –º—ñ—Å—Ü–µ
      const response = await this.getGoogleMapsReviews(testPlaceId, { hl: 'uk' });

      this.logger.log('‚úÖ Serper.dev –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ');
      return true;

    } catch (error) {
      this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ serper.dev: ${error.message}`);
      if (error.message?.includes('Invalid API key') || error.message?.includes('401')) {
        this.logger.error('üîë API –∫–ª—é—á –Ω–µ–¥—ñ–π—Å–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –∫–ª—é—á–∞ –≤ .env —Ñ–∞–π–ª—ñ');
      }
      return false;
    }
  }
}
