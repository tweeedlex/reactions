import { Controller, Post, Body, Get, Query, Logger } from '@nestjs/common';
import { SerperService } from './serper.service';
import { SerperReviewsDto, SerperReviewsResponse } from './dto/serper-reviews.dto';
import { CreateCommentDto } from '../comments/dto/create-comment.dto';

@Controller('serper')
export class SerperController {
  private readonly logger = new Logger(SerperController.name);

  constructor(private readonly serperService: SerperService) {}

  @Post('reviews')
  async getGoogleMapsReviews(
    @Body() serperReviewsDto: SerperReviewsDto
  ): Promise<SerperReviewsResponse> {
    this.logger.log(`üîç –ó–∞–ø–∏—Ç –≤—ñ–¥–≥—É–∫—ñ–≤ Google Maps –¥–ª—è placeId: ${serperReviewsDto.placeId}`);
    
    try {
      const response = await this.serperService.getGoogleMapsReviews(
        serperReviewsDto.placeId,
        serperReviewsDto
      );
      
      this.logger.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ ${response.reviews.length} –≤—ñ–¥–≥—É–∫—ñ–≤`);
      return response;
    } catch (error) {
      this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤: ${error.message}`);
      throw error;
    }
  }

  @Post('parse-reviews')
  async parseGoogleMapsReviews(
    @Body() serperReviewsDto: SerperReviewsDto
  ): Promise<{ comments: CreateCommentDto[]; count: number }> {
    this.logger.log(`üöÄ –ü–∞—Ä—Å–∏–Ω–≥ –≤—ñ–¥–≥—É–∫—ñ–≤ Google Maps –¥–ª—è placeId: ${serperReviewsDto.placeId}`);
    
    try {
      const comments = await this.serperService.parseGoogleMapsReviews(
        serperReviewsDto.placeId,
        serperReviewsDto
      );
      
      this.logger.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ ${comments.length} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤`);
      return {
        comments,
        count: comments.length
      };
    } catch (error) {
      this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –≤—ñ–¥–≥—É–∫—ñ–≤: ${error.message}`);
      throw error;
    }
  }

  @Get('test-connection')
  async testConnection(): Promise<{ success: boolean; message: string }> {
    this.logger.log('üîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ serper.dev');
    
    try {
      const success = await this.serperService.testConnection();
      
      if (success) {
        this.logger.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ serper.dev —É—Å–ø—ñ—à–Ω–µ');
        return {
          success: true,
          message: '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ serper.dev —É—Å–ø—ñ—à–Ω–µ'
        };
      } else {
        this.logger.warn('‚ùå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ serper.dev –Ω–µ–≤–¥–∞–ª–µ');
        return {
          success: false,
          message: '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ serper.dev –Ω–µ–≤–¥–∞–ª–µ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ API –∫–ª—é—á.'
        };
      }
    } catch (error) {
      this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: ${error.message}`);
      return {
        success: false,
        message: `–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: ${error.message}`
      };
    }
  }

  @Get('reviews')
  async getReviewsByPlaceId(
    @Query('placeId') placeId: string,
    @Query('hl') hl?: string,
    @Query('sortBy') sortBy?: string,
    @Query('nextPageToken') nextPageToken?: string
  ): Promise<SerperReviewsResponse> {
    this.logger.log(`üîç GET –∑–∞–ø–∏—Ç –≤—ñ–¥–≥—É–∫—ñ–≤ –¥–ª—è placeId: ${placeId}`);
    
    if (!placeId) {
      throw new Error('placeId —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º');
    }

    const options: Partial<SerperReviewsDto> = {
      hl: hl || 'uk',
      sortBy: sortBy as any || 'newest',
      nextPageToken
    };

    try {
      const response = await this.serperService.getGoogleMapsReviews(placeId, options);
      
      this.logger.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ ${response.reviews.length} –≤—ñ–¥–≥—É–∫—ñ–≤ —á–µ—Ä–µ–∑ GET`);
      return response;
    } catch (error) {
      this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤ —á–µ—Ä–µ–∑ GET: ${error.message}`);
      throw error;
    }
  }

  @Post('parse-universal')
  async parseUniversal(
    @Query('source') source: string,
    @Query('identifier') identifier: string,
    @Query('language') language?: string
  ): Promise<{ comments: CreateCommentDto[]; count: number }> {
    this.logger.log(`üîß –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ serper.dev: ${source} –¥–ª—è ${identifier}`);

    try {
      const comments = await this.serperService.parseReviews(source as any, identifier, {
        language: language || 'uk'
      });

      this.logger.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ ${comments.length} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤`);
      return {
        comments,
        count: comments.length
      };
    } catch (error) {
      this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É: ${error.message}`);
      throw error;
    }
  }

  @Get('sources')
  async getAvailableSources(): Promise<{ source: string; name: string; description: string; supported: boolean }[]> {
    this.logger.log('üìã –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª serper.dev');
    
    try {
      const sources = await this.serperService.getAvailableSources();
      this.logger.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${sources.length} –¥–∂–µ—Ä–µ–ª`);
      return sources;
    } catch (error) {
      this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∂–µ—Ä–µ–ª: ${error.message}`);
      throw error;
    }
  }
}
