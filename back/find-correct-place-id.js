const axios = require('axios');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É Place ID —á–µ—Ä–µ–∑ Google Maps API (—è–∫—â–æ —î –∫–ª—é—á)
async function searchPlaceByCoordinates(lat, lng, apiKey) {
  try {
    console.log(`üîç –ü–æ—à—É–∫ Place ID –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ ${lat}, ${lng} —á–µ—Ä–µ–∑ Google Maps API`);
    
    const response = await axios.get('https://maps.googleapis.com/maps/api/geocode/json', {
      params: {
        latlng: `${lat},${lng}`,
        key: apiKey
      }
    });
    
    if (response.data.results && response.data.results.length > 0) {
      const place = response.data.results[0];
      console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –º—ñ—Å—Ü–µ:`);
      console.log(`   –ù–∞–∑–≤–∞: ${place.formatted_address}`);
      console.log(`   Place ID: ${place.place_id}`);
      return place.place_id;
    } else {
      console.log('‚ùå –ú—ñ—Å—Ü–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏');
      return null;
    }
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —á–µ—Ä–µ–∑ Google Maps API:', error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É —á–µ—Ä–µ–∑ SerpAPI (—è–∫—â–æ —î –∫–ª—é—á)
async function searchPlaceBySerpApi(lat, lng, apiKey) {
  try {
    console.log(`üîç –ü–æ—à—É–∫ Place ID –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ ${lat}, ${lng} —á–µ—Ä–µ–∑ SerpAPI`);
    
    const response = await axios.get('https://serpapi.com/search', {
      params: {
        engine: 'google_maps',
        q: `${lat},${lng}`,
        api_key: apiKey
      }
    });
    
    if (response.data.local_results && response.data.local_results.length > 0) {
      const place = response.data.local_results[0];
      console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –º—ñ—Å—Ü–µ:`);
      console.log(`   –ù–∞–∑–≤–∞: ${place.title}`);
      console.log(`   –ê–¥—Ä–µ—Å–∞: ${place.address}`);
      console.log(`   Place ID: ${place.place_id}`);
      return place.place_id;
    } else {
      console.log('‚ùå –ú—ñ—Å—Ü–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ SerpAPI');
      return null;
    }
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —á–µ—Ä–µ–∑ SerpAPI:', error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä (SerpAPI)
async function searchPlaceByOurServer(lat, lng) {
  try {
    console.log(`üîç –ü–æ—à—É–∫ Place ID –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ ${lat}, ${lng} —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä`);
    
    // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π endpoint
    const response = await axios.get('http://localhost:3000/google-maps/search', {
      params: {
        placeName: `${lat},${lng}`
      }
    });
    
    if (response.data.success && response.data.placeId) {
      console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –º—ñ—Å—Ü–µ:`);
      console.log(`   –ù–∞–∑–≤–∞: ${response.data.placeName}`);
      console.log(`   –ê–¥—Ä–µ—Å–∞: ${response.data.address}`);
      console.log(`   Place ID: ${response.data.placeId}`);
      return response.data.placeId;
    } else {
      console.log('‚ùå –ú—ñ—Å—Ü–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä');
      return null;
    }
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä:', error.message);
    return null;
  }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–± - –ø–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é –º—ñ—Å—Ü—è
async function searchPlaceByName(placeName) {
  try {
    console.log(`üîç –ü–æ—à—É–∫ Place ID –∑–∞ –Ω–∞–∑–≤–æ—é "${placeName}" —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä`);
    
    const response = await axios.get('http://localhost:3000/google-maps/search', {
      params: {
        placeName: placeName
      }
    });
    
    if (response.data.success && response.data.placeId) {
      console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –º—ñ—Å—Ü–µ:`);
      console.log(`   –ù–∞–∑–≤–∞: ${response.data.placeName}`);
      console.log(`   –ê–¥—Ä–µ—Å–∞: ${response.data.address}`);
      console.log(`   Place ID: ${response.data.placeId}`);
      return response.data.placeId;
    } else {
      console.log('‚ùå –ú—ñ—Å—Ü–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –Ω–∞–∑–≤–æ—é');
      return null;
    }
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∑–∞ –Ω–∞–∑–≤–æ—é:', error.message);
    return null;
  }
}

async function main() {
  const lat = 50.4000574;
  const lng = 30.5350083;
  const placeName = "–õ–µ—Ä—É–∞ –ú–µ—Ä–ª–µ–Ω";
  
  console.log('üöÄ –ü–æ—à—É–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ Place ID –¥–ª—è –õ–µ—Ä—É–∞ –ú–µ—Ä–ª–µ–Ω\n');
  console.log(`üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: ${lat}, ${lng}`);
  console.log(`üè™ –ù–∞–∑–≤–∞: ${placeName}\n`);
  
  // –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Å–ø–æ—Å–æ–±–∏ –ø–æ—à—É–∫—É
  console.log('1Ô∏è‚É£ –ü–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä:');
  const placeId1 = await searchPlaceByName(placeName);
  
  console.log('\n2Ô∏è‚É£ –ü–æ—à—É–∫ –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä:');
  const placeId2 = await searchPlaceByOurServer(lat, lng);
  
  // –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ Place ID, –ø—Ä–æ—Ç–µ—Å—Ç—É—î–º–æ –π–æ–≥–æ
  const foundPlaceId = placeId1 || placeId2;
  
  if (foundPlaceId) {
    console.log(`\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ Place ID: ${foundPlaceId}`);
    
    try {
      const testResponse = await axios.get('http://localhost:3000/url-parsing/parse', {
        params: {
          url: `https://maps.google.com/maps/place/${foundPlaceId}`,
          language: 'uk'
        }
      });
      
      if (testResponse.data.success) {
        console.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø—ñ—à–Ω–∏–π! –ù–∞–ø–∞—Ä—Å–µ–Ω–æ ${testResponse.data.count} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤`);
        
        if (testResponse.data.comments && testResponse.data.comments.length > 0) {
          console.log(`   –ü–µ—Ä—à–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: "${testResponse.data.comments[0].content.substring(0, 50)}..."`);
          console.log(`   –ê–≤—Ç–æ—Ä: ${testResponse.data.comments[0].author}`);
          console.log(`   –†–µ–π—Ç–∏–Ω–≥: ${testResponse.data.comments[0].rating}/5`);
        }
      } else {
        console.log(`‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –≤–¥–∞–≤—Å—è: ${testResponse.data.message}`);
      }
    } catch (error) {
      console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ${error.message}`);
    }
  } else {
    console.log('\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π Place ID');
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:');
    console.log('1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —î —É –≤–∞—Å Google Maps API –∫–ª—é—á');
    console.log('2. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ü–µ –≤—Ä—É—á–Ω—É –≤ Google Maps');
    console.log('3. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —ñ–Ω—à—ñ –º—ñ—Å—Ü—è –∑ –≤—ñ–¥–æ–º–∏–º–∏ Place ID');
  }
}

main().catch(console.error);
