const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

async function testPriorityModule() {
  console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥—É–ª—è –ø—Ä—ñ–æ—Ä–∏—Ç–∏–∑–∞—Ü—ñ—ó –≤—ñ–¥–≥—É–∫—ñ–≤...\n');

  try {
    // –¢–µ—Å—Ç 1: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä—ñ–æ—Ä–∏—Ç–∏–∑–æ–≤–∞–Ω–∏—Ö –≤—ñ–¥–≥—É–∫—ñ–≤
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç—É—î–º–æ GET /feedbacks/prioritized');
    const response = await axios.get(`${BASE_URL}/feedbacks/prioritized`);
    console.log(`‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${response.data.length} –≤—ñ–¥–≥—É–∫—ñ–≤`);
    
    if (response.data.length > 0) {
      console.log('üìä –ü—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥–≥—É–∫—É:');
      console.log(JSON.stringify(response.data[0], null, 2));
    }

    // –¢–µ—Å—Ç 2: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç—É—î–º–æ GET /feedbacks/prioritized/stats');
    const statsResponse = await axios.get(`${BASE_URL}/feedbacks/prioritized/stats`);
    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤:');
    console.log(JSON.stringify(statsResponse.data, null, 2));

    // –¢–µ—Å—Ç 3: –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –ª—ñ–º—ñ—Ç–æ–º
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –∑–∞ –ª—ñ–º—ñ—Ç–æ–º (limit=5)');
    const limitedResponse = await axios.get(`${BASE_URL}/feedbacks/prioritized?limit=5`);
    console.log(`‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${limitedResponse.data.length} –≤—ñ–¥–≥—É–∫—ñ–≤ –∑ –ª—ñ–º—ñ—Ç–æ–º 5`);

    // –¢–µ—Å—Ç 4: –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –¥–∂–µ—Ä–µ–ª–æ–º
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –∑–∞ –¥–∂–µ—Ä–µ–ª–æ–º');
    const sourceResponse = await axios.get(`${BASE_URL}/feedbacks/prioritized?source=Google Maps`);
    console.log(`‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${sourceResponse.data.length} –≤—ñ–¥–≥—É–∫—ñ–≤ –∑ Google Maps`);

    // –¢–µ—Å—Ç 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≤—ñ–¥–≥—É–∫—ñ–≤
    console.log('\n5Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—ñ–¥–≥—É–∫—ñ–≤');
    if (response.data.length > 0) {
      const feedback = response.data[0];
      const requiredFields = ['id', 'text', 'date', 'source', 'author', 'likes', 'sentiment', 'category', 'priority', 'status'];
      const missingFields = requiredFields.filter(field => !(field in feedback));
      
      if (missingFields.length === 0) {
        console.log('‚úÖ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç–Ω—ñ');
      } else {
        console.log(`‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ–ª—è: ${missingFields.join(', ')}`);
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤
      const priorities = response.data.map(f => f.priority);
      const uniquePriorities = [...new Set(priorities)];
      console.log(`üìä –ó–Ω–∞–π–¥–µ–Ω—ñ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏: ${uniquePriorities.join(', ')}`);

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
      const sentiments = response.data.map(f => f.sentiment);
      const uniqueSentiments = [...new Set(sentiments)];
      console.log(`üòä –ó–Ω–∞–π–¥–µ–Ω—ñ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ: ${uniqueSentiments.join(', ')}`);
    }

    console.log('\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ:', error.message);
    if (error.response) {
      console.error('üìÑ –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
testPriorityModule();
