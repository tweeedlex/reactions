const axios = require('axios');

// –°–ø–∏—Å–æ–∫ Place ID –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
const testPlaces = [
  {
    name: '–û–¥–µ—Å–∞, –î–µ—Ä–∏–±–∞—Å—ñ–≤—Å—å–∫–∞ (–ø—Ä–∞—Ü—é—î)',
    placeId: 'ChIJN1t_tDeuEmsRUsoyG83frY4',
    url: 'https://maps.google.com/maps/place/ChIJN1t_tDeuEmsRUsoyG83frY4'
  },
  {
    name: '–ö–∏—ó–≤, –ú–∞–π–¥–∞–Ω –ù–µ–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ',
    placeId: 'ChIJd8BlQ2BZwokRAFQEcDlJRAI',
    url: 'https://maps.google.com/maps/place/ChIJd8BlQ2BZwokRAFQEcDlJRAI'
  },
  {
    name: '–õ–æ–Ω–¥–æ–Ω, –¢—Ä–∞—Ñ–∞–ª—å–≥–∞—Ä—Å—å–∫–∞ –ø–ª–æ—â–∞',
    placeId: 'ChIJwULG5WSOdkgR_H2kH5axt2Y',
    url: 'https://maps.google.com/maps/place/ChIJwULG5WSOdkgR_H2kH5axt2Y'
  },
  {
    name: '–ü–∞—Ä–∏–∂, –ï–π—Ñ–µ–ª–µ–≤–∞ –≤–µ–∂–∞',
    placeId: 'ChIJLU7jZClu5kcR4PcOOO6p3I0',
    url: 'https://maps.google.com/maps/place/ChIJLU7jZClu5kcR4PcOOO6p3I0'
  },
  {
    name: '–ù—å—é-–ô–æ—Ä–∫, –¢–∞–π–º—Å-—Å–∫–≤–µ—Ä',
    placeId: 'ChIJmQJIxlVZwokRrQIQHwj7UKk',
    url: 'https://maps.google.com/maps/place/ChIJmQJIxlVZwokRrQIQHwj7UKk'
  }
];

async function testPlace(place) {
  console.log(`\nüîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ${place.name}`);
  console.log(`üìç Place ID: ${place.placeId}`);
  
  try {
    const response = await axios.get('http://localhost:3000/url-parsing/parse', {
      params: {
        url: place.url,
        language: 'uk'
      },
      timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    });
    
    if (response.data.success) {
      console.log(`‚úÖ –£—Å–ø—ñ—Ö! –ù–∞–ø–∞—Ä—Å–µ–Ω–æ ${response.data.count} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤`);
      if (response.data.comments && response.data.comments.length > 0) {
        console.log(`   –ü–µ—Ä—à–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: "${response.data.comments[0].content.substring(0, 50)}..."`);
        console.log(`   –ê–≤—Ç–æ—Ä: ${response.data.comments[0].author}`);
        console.log(`   –†–µ–π—Ç–∏–Ω–≥: ${response.data.comments[0].rating}/5`);
      }
      return { success: true, count: response.data.count };
    } else {
      console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${response.data.message}`);
      return { success: false, error: response.data.message };
    }
    
  } catch (error) {
    console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: ${error.message}`);
    return { success: false, error: error.message };
  }
}

async function main() {
  console.log('üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö Place ID –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –≤—ñ–¥–≥—É–∫—ñ–≤\n');
  
  const results = [];
  
  for (const place of testPlaces) {
    const result = await testPlace(place);
    results.push({
      name: place.name,
      placeId: place.placeId,
      ...result
    });
    
    // –ü–∞—É–∑–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
  }
  
  console.log('\n' + '='.repeat(60));
  console.log('üìä –ü—ñ–¥—Å—É–º–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:');
  console.log('='.repeat(60));
  
  const successful = results.filter(r => r.success);
  const failed = results.filter(r => !r.success);
  
  console.log(`‚úÖ –ü—Ä–∞—Ü—é—é—á—ñ Place ID (${successful.length}):`);
  successful.forEach(result => {
    console.log(`   üìç ${result.name}`);
    console.log(`      Place ID: ${result.placeId}`);
    console.log(`      –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤: ${result.count}`);
  });
  
  console.log(`\n‚ùå –ù–µ–ø—Ä–∞—Ü—é—é—á—ñ Place ID (${failed.length}):`);
  failed.forEach(result => {
    console.log(`   üìç ${result.name}`);
    console.log(`      Place ID: ${result.placeId}`);
    console.log(`      –ü–æ–º–∏–ª–∫–∞: ${result.error}`);
  });
  
  console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:');
  if (successful.length > 0) {
    console.log('   ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø—Ä–∞—Ü—é—é—á—ñ Place ID –∑—ñ —Å–ø–∏—Å–∫—É –≤–∏—â–µ');
  }
  console.log('   üîç –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–∞–π—Ç–∏ —ñ–Ω—à—ñ –º—ñ—Å—Ü—è –∑ –≤—ñ–¥–≥—É–∫–∞–º–∏');
  console.log('   üì± –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Google Maps –¥–ª—è –ø–æ—à—É–∫—É –º—ñ—Å—Ü—å –∑ –±–∞–≥–∞—Ç—å–º–∞ –≤—ñ–¥–≥—É–∫–∞–º–∏');
}

main().catch(console.error);
