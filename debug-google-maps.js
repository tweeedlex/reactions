const axios = require('axios');

const API_BASE_URL = 'http://localhost:3000';

async function debugGoogleMaps() {
  console.log('üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Google Maps –ø–∞—Ä—Å–∏–Ω–≥—É...\n');

  // –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SerpAPI –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
  console.log('1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SerpAPI –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...');
  try {
    const response = await axios.get(`${API_BASE_URL}/google-maps/test-serpapi`);
    console.log('‚úÖ SerpAPI —Å—Ç–∞—Ç—É—Å:', response.data.connected ? '–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ' : '–ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
    console.log('üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', response.data.message);
  } catch (error) {
    console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ SerpAPI:', error.message);
  }

  console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥—É Google Maps...');
  
  // –¢–µ—Å—Ç –∑ —Ä—ñ–∑–Ω–∏–º–∏ URL
  const testUrls = [
    'https://maps.app.goo.gl/ABC123',
    'https://www.google.com/maps/place/Test+Place/@50.4501,30.5234,17z',
    'https://maps.google.com/maps?cid=123456789'
  ];

  for (const url of testUrls) {
    console.log(`\nüîó –¢–µ—Å—Ç—É—î–º–æ URL: ${url}`);
    try {
      const startTime = Date.now();
      const response = await axios.post(`${API_BASE_URL}/google-maps/parse`, {
        url: url
      });
      const endTime = Date.now();
      const duration = Math.round((endTime - startTime) / 1000);

      console.log(`‚è±Ô∏è –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${duration} —Å–µ–∫—É–Ω–¥`);
      console.log(`‚úÖ –£—Å–ø—ñ—Ö: ${response.data.success}`);
      console.log(`üìä –ó–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–≥—É–∫—ñ–≤: ${response.data.parsedCount}`);
      console.log(`üìç Place ID: ${response.data.placeId}`);
      console.log(`üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${response.data.message}`);

      if (response.data.parsedCount > 0) {
        console.log('üéâ –ó–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–≥—É–∫–∏!');
      } else {
        console.log('‚ö†Ô∏è –í—ñ–¥–≥—É–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ');
      }
    } catch (error) {
      console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.response?.data?.message || error.message}`);
    }
  }

  console.log('\n3Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤...');
  try {
    const response = await axios.get(`${API_BASE_URL}/comments`);
    const comments = response.data;
    const googleMapsComments = comments.filter(c => c.store === 'googlemaps');
    
    console.log(`üìä –í—Å—å–æ–≥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –≤ –ë–î: ${comments.length}`);
    console.log(`üó∫Ô∏è Google Maps –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤: ${googleMapsComments.length}`);
    
    if (googleMapsComments.length > 0) {
      console.log('üìù –û—Å—Ç–∞–Ω–Ω—ñ Google Maps –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ:');
      googleMapsComments.slice(0, 3).forEach((comment, index) => {
        console.log(`  ${index + 1}. ${comment.author}: ${comment.content.substring(0, 50)}...`);
      });
    } else {
      console.log('‚ö†Ô∏è Google Maps –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î');
    }
  } catch (error) {
    console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤: ${error.message}`);
  }

  console.log('\n4Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–∏–∑–æ–≤–∞–Ω–∏—Ö –≤—ñ–¥–≥—É–∫—ñ–≤...');
  try {
    const response = await axios.get(`${API_BASE_URL}/feedbacks/prioritized?limit=10`);
    const feedbacks = response.data;
    const googleMapsFeedbacks = feedbacks.filter(f => f.source === 'googlemaps');
    
    console.log(`üìä –í—Å—å–æ–≥–æ –ø—Ä—ñ–æ—Ä–∏—Ç–∏–∑–æ–≤–∞–Ω–∏—Ö –≤—ñ–¥–≥—É–∫—ñ–≤: ${feedbacks.length}`);
    console.log(`üó∫Ô∏è Google Maps –≤—ñ–¥–≥—É–∫—ñ–≤: ${googleMapsFeedbacks.length}`);
    
    if (googleMapsFeedbacks.length > 0) {
      console.log('üìù –û—Å—Ç–∞–Ω–Ω—ñ Google Maps –≤—ñ–¥–≥—É–∫–∏:');
      googleMapsFeedbacks.slice(0, 3).forEach((feedback, index) => {
        console.log(`  ${index + 1}. ${feedback.author}: ${feedback.text.substring(0, 50)}...`);
      });
    } else {
      console.log('‚ö†Ô∏è Google Maps –≤—ñ–¥–≥—É–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ø—Ä—ñ–æ—Ä–∏—Ç–∏–∑–æ–≤–∞–Ω–∏—Ö');
    }
  } catch (error) {
    console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä—ñ–æ—Ä–∏—Ç–∏–∑–æ–≤–∞–Ω–∏—Ö –≤—ñ–¥–≥—É–∫—ñ–≤: ${error.message}`);
  }

  console.log('\nüèÅ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

debugGoogleMaps().catch(console.error);
